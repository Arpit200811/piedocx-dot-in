import Employee from "../models/employee.model.js";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";

// otp generator start
export function otpGen() {
  let otp = "";

  for (let i = 0; i <= 5; i++) {
    otp += Math.floor(Math.random() * 10);
  }

  return otp;
}
// otp generator end

// node mailer code start
export  function mailSender(email) {
  const otp = otpGen();

  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: "adityasales61@gmail.com", // Replace with your email
      pass: "hqnq kaxh dvje nspf", // Replace with your email password or App Password
    },
  });

  const mailOptions = {
    from: "your-email@gmail.com",
    to: `${email}`,
    subject: "OTP generated by Piedocx Technologies Pvt. Ltd. ",
    // text: `your otp is : ${otp}`,
    html:`
    
    <html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your OTP Code</title>
</head>
<body style="background-color: #f3f4f6; font-family: Arial, sans-serif; margin: 0; padding: 0;">
    <div style="max-width: 600px; margin: 32px auto; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); overflow: hidden;">
        <div style="background-color: #4f46e5; padding: 24px; text-align: center;">
            <h1 style="color: #ffffff; font-size: 24px; font-weight: bold; margin: 0;">Your OTP Code</h1>
        </div>
        <div style="padding: 32px;">
            <p style="color: #4b5563; margin-bottom: 16px;">Hello,</p>
            <p style="color: #4b5563; margin-bottom: 16px;">Your One-Time Password (OTP) for account verification is:</p>
            <div style="background-color: #f3f4f6; border-radius: 8px; padding: 16px; margin-bottom: 24px; text-align: center;">
                <p style="font-size: 32px; font-weight: bold; color: #4f46e5; margin: 0;">${otp}</p>
            </div>
            <p style="color: #4b5563; margin-bottom: 16px;">This OTP is valid for <strong>2 minutes</strong>. Please do not share this code with anyone.</p>
            <p style="color: #4b5563; margin-bottom: 16px;">If you didn't request this code, please ignore this email.</p>
            <p style="color: #4b5563;">Thank you for using our service!</p>
        </div>
        <div style="background-color: #f3f4f6; padding: 16px; text-align: center;">
            <p style="font-size: 14px; color: #6b7280; margin: 0;">&copy; 2025 Piedocx Technologies Pvt. Ltd. All rights reserved.</p>
        </div>
    </div>
</body>
</html>

    
    `
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log("Error:", error);
    } else {
      console.log("Email sent:", info.response);
    }
  });

  return otp;
}
// node mailer code end

export const empsignup = async (req, res) => {
  const employees = ['PDT250001','PDT250002','PDT250003','PDT250004','PDT250005','PDT250006','PDT250007','PDT250008','PDT250009','PDT250010']
  const { name, email, password, empid , otp} = req.body;

  try {
   const givenOtp = req.cookies.otp
   console.log(givenOtp);
   
   if(otp == givenOtp){
    const isRegistered = await Employee.findOne({$or:[{email},{empid}]}); 
    if(!isRegistered){

   
    if(employees.includes(empid)){
      console.log(empid);
      
    const emp = await Employee.create({ name, email,password,  empid });
    const updatedEmp = emp.toObject()
    delete updatedEmp.password
    res.cookie('otp', '', {maxAge:0})
    res.status(201).json({ message: "Registered Seccessfully ! ", updatedEmp, code:201 });
    }else{
      res.status(200).json({message:"Invalid employee id ", code :400})
    }
  } else{
    res.status(200).json({message:"Employee Already Registered !", code:400})
  }
    
   }else{
    res.status(401).json({message:"Un authorized access / otp not matched  " })
   }

    
  } catch (error) {
    console.log("Error in empSignup controller : ", error.message);
    res.status(500).json({ message: " Internal server error  ! " });
  }
};

export const otpverification = async (req, res) => {
  const { email } = req.body;
  console.log(email);
  
  try {
    const otp = mailSender(email);
    res.cookie("otp", otp, { maxAge: 10 * 60 * 1000 });
    
    res.status(200).json({message:`Otp send successfully ! to you email : ${email}`})
  } catch (error) {
    console.log("Error in otpverification controller : ", error.message);
    res.status(500).json({ message: " Internal server error  ! " });

  }
};

export const emplogin = async (req, res) => {
  const { email, password, empid } = req.body;
  console.log(email);
  

  const time = Date()
  try {
    const emp = await Employee.findOne({ email, password, empid });
    if (!emp) {
      return res.status(404).json({ message: "Invalid credentials ! " });
    } else {
      const employee = { name: emp.name, email: emp.email, empid: emp.empid, time:time };
      const token = jwt.sign(employee, process.env.SECRET_KEY, {
        expiresIn: "10h",
      });
      res.cookie("token", token, { maxAge: 10 * 60 * 60 * 1000 });
      res
        .status(201)
        .json({ message: "Login  Seccessfully ! ", employee, token });
    }
  } catch (error) {
    console.log("Error in empLogin controller : ", error.message);
    res.status(500).json({ message: " Internal server error  ! " });
  }
};

export const emplogout = async (req, res) => {
  try {
    const token = req.cookies.token;
    if (!token) {
      res.status(201).json({ message: "Already Logged out ! " });
    } else {
      res.cookie("token", "", { maxAge: 0 });
      res.status(201).json({ message: "Logged out Seccessfully ! " });
    }
  } catch (error) {
    console.log("Error in emplogout controller : ", error.message);
    res.status(500).json({ message: " Internal server error  ! " });
  }
};

export const empprofile = async (req, res) => {
  try {
    const token = req.cookies.token;
    const verifyToken = jwt.verify(
      token,
      process.env.SECRET_KEY,
      (err, decoded) => {
        if (err) {
            return res.send({
      success: false,
      data: null,
      code: 401,
      error:true,
      msg:"UnAuthorized access !"
    })
        } else {
        return res.send({
      success: true,
      data: decoded,
      code: 200,
      error:false,
      msg:"Welcome to Profile"
    })
  }
      });
    
    // const emp = await Employee.findOne({ email });
  } catch (error) {
    console.log("Error in emplogout controller : ", error.message);
    res.status(500).json({ message: " Internal server error  ! " });
  }
};



// get employee 

export const empget = async(req, res)=>{
    try {
        const employees = await Employee.find()
    } catch (error) {
        
    }
}